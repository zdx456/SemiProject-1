/*
    CSS file
    모듈화 시키고 싶은 디자인 코드를 이곳에 작성

    HTML 페이지에서는 다음과 같이 불러온다.
    
    <link rel="stylesheet" type="text/css" href="파일경로">
*/

@charset "UTF-8";

* {
    box-sizing: border-box;
}

/*
    컨테이너(Container)
    - 특정 화면의 가장 바깥쪽 영역
    - 어떤 폭을 가지는 컨테이너를 사용할지 모르므로 대략적으로 미리 준비해둔다
    - 가운데 정렬이 이루어지도록 구현
    - 100px부터 50px간격으로 1000px까지 준비

    - ex) .container.w100 이면 폭이 100px이면서 가운데 나오는 영역
*/
.container {
    margin:auto;
}
.w100 { width :100px; }
.w150 { width :150px; }
.w200 { width :200px; }
.w250 { width :250px; }
.w300 { width :300px; }
.w350 { width :350px; }
.w400 { width :400px; }
.w450 { width :450px; }
.w500 { width :500px; }
.w550 { width :550px; }
.w600 { width :600px; }
.w650 { width :650px; }
.w700 { width :700px; }
.w750 { width :750px; }
.w800 { width :800px; }
.w850 { width :850px; }
.w900 { width :900px; }
.w950 { width :950px; }
.w1000 { width :1000px; }

/*
    컨테이너 내부 줄(row) 디자인
    - 정렬을 선택할 수 있어야 한다.
    - 상하간격을 선택할 수 있어야 한다.

    - 상하간격은 0px부터 10px간격으로 50px까지 준비한다.
*/

.row {
    margin: 10px 0px;
    text-align: left;
}

/*
	우선순위를 최상위로 올리는 방법이 있다.
	속성 값 뒤에 !important라고 추가하면 되는데 너무 많이쓰면 중요한 것들끼리 우선순위 충돌이 생기므로 가급적 사용을 자제
*/
.left        { text-align: left !important; }
.center   { text-align: center !important; }
.right     { text-align: right !important; }

.m0 {
    margin-top: 0px;
    margin-bottom: 0px;
}
.m10 {
    margin-top: 10px;
    margin-bottom: 10px;
}
.m20 {
    margin-top: 20px;
    margin-bottom: 20px;
}
.m30 {
    margin-top: 30px;
    margin-bottom: 30px;
}
.m40 {
    margin-top: 40px;
    margin-bottom: 40px;
}
.m50 {
    margin-top: 50px;
    margin-bottom: 50px;
}


/*
    모든 이미지에 대한 공용 스타일
*/
.img {
    /* transparent는 투명을 의미 */
    border: 2px solid transparent;
}

/* class에 img가 있는 항목 중에서 .img-border라는 항목을 선택하라! */
.img.img-border {
    border: 2px solid black;
}
.img.img-circle {
    border-radius: 50%;
}
.img.img-round {
    border-radius: 10px;
}
.img.img-blur {
    /* opacity는 불투명도이며 0부터 1 사이로 설정한다. (0 - 투명 , 1 - 불투명) */
    opacity: 0.4;
}
/* 마우스가 올라가면 이미지가 선명해지도록 구현 */
.img.img-hover {
    opacity: 0.4;
}
/* 선택자 뒤에 :hover가 붙으면 마우스가 올라간 경우의 디자인을 구현 */
.img.img-hover:hover {
    opacity: 1;
}
/* 
    이미지에 그림자를 부여 
    box-shadow : x축이동정도 y축이동정도 번짐정도 확산정도 색상
*/
.img.img-shadow {
    border:none;
    /* box-shadow: 3px 3px 3px 0 black; */
    box-shadow: 0 0 3px 1px black;
}

/*
    a 태그 디자인
    - 버튼처럼 보이는 링크도 필요하다
    - 링크여도 밑줄이 안나와야 하는 경우가 더 많다
    - 마우스로 눌러야 하므로 마우스에 반응하면 좋다
*/

/* 기본 스타일 : .link */
.link {
    text-decoration: none;
    color:gray;
}
.link:hover {
    color: black;
}

/* 확장 스타일 */

/* .link-btn : 버튼 모양의 링크 */
.link.link-btn {
    border: 1px solid gray;
    border-radius: 0.25em;
    /* 
        현재 대상의 글자크기에 비례한 여백을 지정 
        1em = 글자 1개의 높이
    */
    padding: 0.5em;
    /*
        버튼은 폭을 설정할 수 있어야 한다.
        a태그는 display가 inline속성을 가진다
        그렇다고 display를 block으로 바꾸면 한 줄에 하나만 나온다
        섞어서 display를 inline-block이라고 지정하면 한 줄에 여러개 배치되며 폭 지정이 가능
    */
    display:inline-block;
    text-align: center;
}
.link.link-btn:hover {
    border: 1px solid black;
    color: black;
}


/*
    연계 선택자
    - 특정 태그를 "기준"으로 해서 경로를 탐색하는 선택자
    - 상대 경로같은 개념
    - 종류 : + , ~ , > , 띄어쓰기 까지 총 4종류가 존재
        (1) + : 바로 뒤에 있는 태그를 선택
        (2) ~ : 뒤에 있는 모든 태그를 선택
        (3) > : 내부에 있는 직계 태그를 선택
        (4) 띄어쓰기 : 내부에 있는 모든 태그를 선택
*/
.pagination {
    text-align: center;
    /* 이 설정을 하면 내부 항목의 줄바꿈이 일어나지 않는다 */
    white-space: nowrap;
    /* 영역을 넘어가는 내용에 대해 표시하지 않도록 설정한다 */
    overflow: hidden;            
}
.pagination > a {
    color: black;
    text-decoration: none;

    display: inline-block;
    min-width:2em;
    padding: 0.25em;

    text-align: center;

    border:1px solid black;
}
.pagination > a:hover,
.pagination > a.active {
    color: red;
    border-color: red;
}

/*
    입력창이 필요한 경우는 크게 두 종류이다.
    (1) 회원가입, 로그인처럼 세로 배치가 이루어지는 경우
        - 입력창의 폭을 100%로 설정해야 한다.
        - 확장 스타일로 설정
    (2) 검색화면처럼 가로 배치가 이루어지는 경우
        - 입력창의 폭은 설정할 필요가 없다
        - .form-input
        - 기본 스타일로 설정
*/
.form-input {
    /* outline은 선택 시 자동으로 생기는 테두리이다 */
    outline: none;
    padding: 0.5em;
    border: 1px solid #b2bec3;
    font:inherit;
}
/*
    :focus 는 해당 태그에 포커스가 맞춰진 경우 실행되는 조건부 선택자
    = 입력창은 커서가 위치하면 포커스가 맞춰졌다고 본다
*/
.form-input:focus {
    border-color: black;
}

.fill {
    width:100%;
}

/* 확장 스타일 : 밑줄만 있는 입력창 */
.form-input.input-underline {
    border-top: none;
    border-left: none;
    border-right:none;
}

/* 확장 스타일 : 배경이미지가 좌측에 삽입되는 입력창 */
.form-input.input-image {
    padding-left: 2.5em;

    /* 
        배경 이미지는 url 함수로 설정하며, 상대경로밖에 지정할 수 없다(css 코드가 작성된 파일 기준)
        배경은 기본적으로 반복해서 배치되게 되어 있다.
    */
    /* background-image: url("./image/lock.jpg"); */
    background-size: 1.5em;
    background-repeat: no-repeat;
    background-position: left 0.5em center;
}

/* 확장 스타일 : 모서리가 둥근 입력창 */
.form-input.input-round {
    border-radius: 0.25em;
}

/* textarea 폭 조절 금지 */
textarea.form-input {
    resize: vertical;
}

/*
    버튼(Button)
    - 클릭할 수 있는 도구
    - 버튼의 종류는 하나가 아니다

    버튼의 구분 : 버튼의 역할을 통해 버튼 디자인을 구분한다
    - 중요한 버튼
    - 덜 중요한 버튼
    - 긍정 버튼
    - 부정 버튼
    - 위험한 버튼
    - 경고 버튼
    - 정보 버튼
    - ...

    일반 스타일 : 기본 버튼
    확장 스타일 : 중요한 버튼, 덜 중요한 버튼, 경고 버튼, 위험 버튼, 성공 버튼
*/

.btn {
    border:1px solid gray;
    border-radius: 0.25em;
    padding:0.5em;

    color:gray;
    background-color: white;

    cursor: pointer;

    /* 어떤 속성을 inherit로 설정하면 기본값이 아니라 외부의 항목을 그대로 상속받아 쓰겠다는 의미 */
    font:inherit;
}
.btn:hover {
    color:black;
    border-color: black;
}

.btn.btn-primary {
    border-color: #0984e3;
    background-color: #0984e3;
    color:white;
}
.btn.btn-primary:hover {
    border-color: #0769b5;
    background-color:#0769b5;
}

.btn.btn-secondary {
    border-color: #636e72;
    background-color: #636e72;
    color: white;
}
.btn.btn-secondary:hover {
    border-color: #4f585b;
    background-color: #4f585b;
}

.btn.btn-success{
    border-color:#00b894;
    background-color:#00b894;
    color:white;

}
.btn.btn-success:hover{
    border-color:#009376;
    background-color:#009376;
}

.btn.btn-warning{
    border-color:#fdcb6e;
    background-color:#fdcb6e;
    color:white;
}
.btn.btn-warning:hover{
    border-color:#fcb126;
    background-color:#fcb126;
}

.btn.btn-danger{
    border-color:#d63031;
    background-color:#d63031;
    color:white;

}
.btn.btn-danger:hover{
    border-color:#ae2223;
    background-color:#ae2223;
}

/*
    테이블 디자인
    - 사용하는 태그가 많고 체계가 정해져 있다
    - 테이블에만 class를 붙여서 전부 다 제어할 수 있도록 한다
    - 연계 선택자 중 자식 선택자가 필요하다!
    - table
        - thead
            - tr
                - th/td
        - tbody
            - tr
                - th/td
        - tfoot
            - tr
                - th/td

    th와 td를 선택하는 방법
    1. thead, tbody, tfoot을 각각 처리하는 방법
        - .table > thead > tr > td
        - 총 6개의 선택자를 만들어야 되서 귀찮다
    2. 모두 한 번에 선택하는 방법
        - .table td
        - 테이블 안에 있는 테이블의 td에도 영향을 미친다
*/

/* 테이블 기본 스타일 */
.table {
    width:100%;
    /* 테두리 병합 설정 */
    border-collapse: collapse;
}
.table > thead > tr > th,
.table > thead > tr > td,
.table > tbody > tr > th,
.table > tbody > tr > td,
.table > tfoot > tr > th,
.table > tfoot > tr > td 
{
    text-align: center;
    padding:0.5em;
}

/*
    확장 스타일
    1. 테두리가 있는 테이블 - .table-border
    2. 줄무늬 테이블 - .table-stripe
    3. 마우스를 감지하는 테이블 - .table-hover
*/
.table.table-border {
    border: 1px solid black;
}
.table.table-border > thead > tr > th,
.table.table-border > thead > tr > td,
.table.table-border > tbody > tr > th,
.table.table-border > tbody > tr > td,
.table.table-border > tfoot > tr > th,
.table.table-border > tfoot > tr > td 
{
    border:1px solid black;
}

.table.table-stripe {}
/* 제목은 배경색상을 칠해준다 */
.table.table-stripe > thead > tr,
.table.table-stripe > tfoot > tr {
    background-color: #E4FBFF;
}
/* 
    2줄에 한 번씩 배경색상을 칠해준다 
    nth-child(2n) 이라고 작성하면 패턴이 지정된다
    자동으로 n=1, 2, 3, 4, 5가 들어가서 계산된 순서 태그가 선택
*/
.table.table-stripe > tbody > tr:nth-child(2n) {
    background-color: #E4FBFF;
}

.table.table-hover {}
.table.table-hover > thead > tr,
.table.table-hover > tfoot > tr {
    background-color: #E4FBFF;
}
.table.table-hover > tbody > tr:hover {
    background-color: #E4FBFF;
}

/*
    다단 레이아웃(2단 이상의 가로 배치) 구현하기
    - 지금까지 구현했던 화면들은 한 줄에 1개만 나오는 경우였다
    - CSS에서 가로배치를 구현하는 방법은 3가지
        (1) float 속성 사용
        (2) flexbox layout 사용
        (3) grid layout 사용
*/

/*
    float를 사용할 경우 디자인 상 가장 문제가되는 것은 clear를 어디서 할 것인가?
    - 즉, float는 아무데서나 쓰면 문제가 생긴다
    - 주어진 영역에서만 float를 쓰도록 영역을 하나 만든다
*/

.float-container {}
.float-container > .float-left {
    float:left;
}
.float-container > .float-right {
    float:right;
}

/*
    가상 선택자(pseudo selector) 
    - 존재하지 않는 영역을 선택하는 선택자
    - 대표적으로 시작지점(::before)과 종료지점(::after) 등을 사용할 수 있다
    - 애초에 존재하지 않는 공간이므로 존재하도록 만드는 후처리가 필요하다
    - content를 이용해서 글자를 입력해주고
    - display를 이용해서 배치기준을 설정해준다.
*/
.float-container::after {
    content:"";
    display: block;
    clear:both;
}

/* 1단부터 5단까지 클래스를 이용해서 폭을 설정하도록 구현 */
.layer-1 {
    width:100%;
}
.layer-2 {
    width:50%;
}
.layer-3 {
    width:33.3333%;
}
.layer-4 {
    width:25%;
}
.layer-5 {
    width:20%;
}

/*
    로딩화면을 만드는 이유 2가지
    (1) 사용자에게 무언가 하고 있음을 알려줘서 기다리게 만드는 효과
    (2) 화면 전체를 덮도록 만들어서 클릭을 불가능하게 만드는 효과
*/
.fullscreen {
    position: fixed;
    top:0;
    left:0;
    right:0;
    bottom:0;
    /* 배경색에 투명도(alpha)를 조절하여 투명하게 구현. alpha는 0부터 1사이로 설정 */
    background-color: rgba(0, 0, 0, 0.1);

    /* 태그를 표시하지 않고 싶을 경우 display를 제거 */
    display: none;
}

/* active가 붙는다면 활성화 되었다는 의미로 표시하도록 구현 */
.fullscreen.active {
    display: block;
}

.fullscreen > .center-position {
    position: absolute;
    top:50%;
    left:50%;

    /* 1번 방식 : 모든브라우저에서 되지만 폭을 알아야 함 */
    /* 
    margin-left: -100px;
    margin-top: -100px; 
    */

    /* 
        2번 방식 : 모든브라우저에서 되진 않지만 폭을 몰라도 적용되는 방식 
        transform은 회전, 기울이기, 확대/축소, 이동 등을 제어할 수 있는 속성
    */
    transform: translate(-50%, -50%);
}

/*
    메뉴 디자인 계획
    (1) list 태그에는 디자인에 어울리지 않는 기호가 있으므로 이를 제거한다
        - ul.menu > li > ul : 2차 메뉴의 ul만 선택
        - ul.menu ul : 하위 ul 전부 다 선택(2,3,4,5차, ...)
    (2) ul에 설정된 기본 여백을 제거한다.
    (3) 1차 메뉴들을 가로로 배치한다.
        - ul.menu > li
    (4) 1차 메뉴들에 간격을 설정한다.
    (5) 처음에는 메뉴만 보이게 하고, 항목은 숨겨야 한다.
        - ul.menu ul
    (6) 메뉴에 마우스가 올라가면 하위 항목을 표시해야 한다.
        - ul.menu li:hover > ul
    (7) 
    2차 메뉴 이상(3차, 4차, ... 포함) 위치를 절대 배치(absolute)로 변경한다.
    모든 메뉴 항목 위치 배치를 연관 배치(relative)로 변경한다.
    (8) 하위 메뉴들과 상위 메뉴가 같은 폭을 가지도록 처리한다.
    (9) 여백과 색상을 설정한다.
    (10) a태그를 li에 가득채우도록 변경한다.
    (11) 좌측에 배치될 메뉴와 우측에 배치될 메뉴를 구분한다.
        - 좌측 메뉴 : 표시하지 않는 경우 기본값으로 설정
        - 우측 메뉴 : .right-menu
    (12) 3차 이상의 메뉴들은 아래가 아닌 우측 또는 좌측에 나오도록 구현
    (13) 우측 메뉴들은 3차 이상의 하위 메뉴가 좌측에 나오도록 구현
    (14) 메뉴 글자가 많아지면 말줄임표 처리
        - (주의) 폭이 반드시 지정되어있어야 한다.
*/

ul.menu, 
ul.menu ul {
    list-style: none;/* (1) */

    /* (2) */
    padding:0;
    margin:0;
}

/* (3) ul의 마지막에는 clear를 해주고 li는 float로 배치 */
ul.menu::after {
    content:"";
    display:block;
    clear:both;
}
ul.menu > li {
    float:left;
    width:100px; /* (4) */
}

/* (5) 2차 이상의 메뉴를 숨긴다 */
ul.menu ul {
    display: none;
}
/* (6) 메뉴 항목에 마우스가 올라가면 하위 메뉴를 표시한다 */
ul.menu li:hover > ul {
    display: block;
}
/* (7) */        
ul.menu li {
    position:relative;
}
ul.menu ul {
    position:absolute;
    top:100%;
    left:0%;
}
/* (8) */
ul.menu ul {
    width:100%;
}
/* (9) */
ul.menu {
    font-size: 16px;
}
ul.menu, ul.menu ul {
    background-color: #2d3436;
}
ul.menu li {
    padding: 0.5em;
    text-align: center;
}
ul.menu a {
    text-decoration: none;
    color:white;
}
ul.menu li:hover {
    background-color: #636e72;
}
/* (10) */
ul.menu a {
    display: block;
    width:100%;
}
/* (11) */
ul.menu > li.right-menu {
    float:right;
}
/* (12) 3차메뉴 이상을 선택(3차, 4차, 5차, ...) */
ul.menu > li > ul ul {
    top:0%;
    left:100%;
}
/* (13) */
ul.menu > li.right-menu > ul ul {
    left:-100%;
}
/* (14) */
ul.menu a {
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
}